<?php

namespace Samsin33\DecisionEngine\Models;

use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\HasMany;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Validator;
use Illuminate\Support\MessageBag;
use Illuminate\Validation\Rule;
use Samsin33\DecisionEngine\DecisionEngine;

class RuleExecution extends Model
{
    /**
     * @var MessageBag
     */
    private MessageBag $errors;

    /**
     * The table associated with the model.
     *
     * @var string
     */
    protected $table = 'rule_executions';

    /**
     *
     * @var array<string>
     */
    protected $fillable = ['rule_engine_id', 'input', 'output', 'status'];

    /**
     *
     * @var array<string>
     */
    protected $visible = ['id', 'rule_engine_id', 'input', 'output', 'status', 'created_at', 'updated_at'];

    protected static function booted()
    {
        parent::booted(); // TODO: Change the autogenerated stub

        self::creating(function () {
            $this->created_by = Auth::user()->id ?? null;
            $this->status = 'Begin Execution';
            $this->ipaddress = request()->ip();
        });

        self::saving(function () {
            $validates = Validator::make($this->getAttributes(), $this->getValidationRules());
            if ($validates->fails()) {
                $this->errors = $validates->errors();
                return false;
            }
            return $this;
        });

        self::updated(function () {
            $execution_log = DecisionEngine::ruleExecutionLog(['previous_attributes' => $this->getOriginal(), 'new_attributes' => $this->getDirty()]);
            $execution_log->save();
        });
    }

    //--------------------- Validations --------------------------------

    /**
     *
     * @return array
     */
    public function getValidationRules(): array
    {
        return [
            'rule_engine_id' => ['required',
                Rule::exists(config('decision-engine.db_connection').'.rule_engines', 'id'),
            ],
            'input' => ['required', 'array'],
            'status' => ['string',
                Rule::requiredIf(function () {
                    return $this->id > 0;
                }),
            ],
        ];
    }

    /**
     * @return MessageBag
     */
    public function getErrors(): MessageBag
    {
        return $this->errors;
    }

    //--------------------- Relationships ------------------------------

    /**
     *
     * @return BelongsTo
     */
    public function ruleEngine(): BelongsTo
    {
        return $this->belongsTo(DecisionEngine::$ruleEngineModel, 'rule_engine_id', 'id');
    }

    /**
     * @return HasMany
     */
    public function ruleExecutionLogs(): HasMany
    {
        return $this->hasMany(DecisionEngine::$ruleExecutionLogModel, 'rule_execution_id', 'id');
    }
}
